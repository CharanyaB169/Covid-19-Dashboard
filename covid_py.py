# -*- coding: utf-8 -*-
"""covid.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18o97aRRtKMtmDt1lzNgpEnCFat9ATAWS
"""

#Perform EDA ON A DATASET
#Step 1 : Data & EDA
#Data Selection & Loading

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("India_COVID19_Statewise_Summary_2020_2023.csv")
df.head()

df = df.drop(['Unnamed: 5', 'Unnamed: 6'], axis=1)
display(df.head())

from google.colab import sheets
sheet = sheets.InteractiveSheet(df=df)

df.info()

df.tail()

df[1:10]

df.isnull().sum()

df.describe()

#to add new column
df['remaining_cases']=df['Total Cases']-df['Total Recoveries']
df.head()

#to delte a column
df_1=df.drop(['remaining_cases'],axis=1)
df_1.head()

#to rename a column
df_2=df_1.rename(columns={'Total Cases':'tot_case'})
df_2.head()

df_e=pd.read_csv('India_COVID19_Statewise_Summary_2020_2023_e.csv')
df_e.info()

df_e['Total Deaths'].mean()

df_e['Total Deaths'].isnull().sum()

df['Total Deaths'] = df['Total Deaths'].fillna(df['Total Deaths'].mean())
df

"""# Task
Create derived features (moving averages, growth rates, etc.)

## Check for date information

### Subtask:
Determine if there's a date column in the dataset to calculate time-series based features like moving averages and growth rates.

**Reasoning**:
Print the column names and their data types to check for a date column.
"""

print(df.columns)
print(df.dtypes)

#moving averages
df['Percentage Deaths'] = (df['Total Deaths'] / df['Total Deaths'].sum()) * 100
display(df[['State', 'Total Deaths', 'Percentage Deaths']])

from google.colab import files

uploaded_with_date = files.upload()

for fn in uploaded_with_date.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded_with_date[fn])))

df_date = pd.read_csv("India_COVID19_Statewise_Monthly_date (1).csv")
df_date.head()

df_date['Date'] = pd.to_datetime(df_date['Date'], format='%d-%m-%Y')
display(df_date.info())

df_date['Moving_Average_Cases'] = df_date.groupby('State')['Total Cases'].rolling(window=7, min_periods=1).mean().reset_index(0, drop=True)
df_date['Case_Growth_Rate'] = df_date.groupby('State')['Total Cases'].pct_change()

display(df_date.head())

#Statistical Analysis
#Calculate descriptive statistics (mean, median, std)

mean = df_date['Total Cases'].mean()
median = df_date['Total Cases'].median()
mode = df_date['Total Cases'].mode()[0]  # Get first mode value
variance = df_date['Total Cases'].var()

print(f"Mean: {mean:.2f}")
print(f"Median: {median:.2f}")
print(f"Mode: {mode:.2f}")
print(f"Variance: {variance:.2f}")

#Perform correlation analysis

from scipy import stats

# Compute Pearson correlation
correlation, p_value = stats.pearsonr(df_date['Total Cases'], df_date['Total Deaths'])

print(f"Correlation: {correlation:.3f}, P-value: {p_value:.4f}")

#Conduct time series decomposition
#Show seasonal patterns

from statsmodels.tsa.seasonal import seasonal_decompose

# Set the 'Date' column as the index
df_date_indexed = df_date.set_index('Date')

# Perform time series decomposition on 'Total Cases'
decomposition = seasonal_decompose(df_date_indexed['Total Cases'], model='additive', period=12) # Assuming a yearly seasonality (12 months)

# Plot the decomposed components
fig = decomposition.plot()
fig.set_size_inches(10, 8)
plt.show()

#Initial Visualizations
#Create time series line charts

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))
sns.lineplot(data=df_date, x='Date', y='Total Cases', hue='State')
plt.title('Total Cases Over Time by State')
plt.xlabel('Date')
plt.ylabel('Total Cases')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Plot distributions (histograms/box plots)

# Histograms for key numerical columns
numerical_cols = ['Total Cases', 'Total Deaths', 'Total Recoveries', 'Total Vaccinations']
df_date[numerical_cols].hist(figsize=(12, 8))
plt.tight_layout()
plt.show()

# Box plot for Total Cases by State
plt.figure(figsize=(15, 8))
sns.boxplot(data=df_date, x='State', y='Total Cases')
plt.title('Distribution of Total Cases by State')
plt.xlabel('State')
plt.ylabel('Total Cases')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

#Generate correlation heatmaps

# Generate a correlation heatmap
correlation_matrix = df_date[numerical_cols].corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap of Numerical Columns')
plt.show()